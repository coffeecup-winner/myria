#[repr(C)]
#[repr(packed)]
struct IDTDescriptor {
    offset0: u16,
    selector: u16,
    zero: u8,
    type_attr: u8,
    offset1: u16,
}

#[repr(C)]
#[repr(packed)]
struct IDTArray {
    limit: u16,
    base: u32,
}

static IDT: [IDTDescriptor; 256] = [
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
    IDTDescriptor::interrupt(0),
];

static mut IDTA: IDTArray = IDTArray {
    limit: 0,
    base: 0,
};

extern "C" {
    fn _load_idt(idta: *const IDTArray);
}

pub fn load_idt() {
    unsafe {
        IDTA.limit = 256 * core::mem::size_of::<IDTDescriptor>() as u16 - 1;
        IDTA.base = IDT.as_ptr() as u32;
        _load_idt(&IDTA as *const IDTArray);
    }
}

impl IDTDescriptor {
    const fn interrupt(offset: u32) -> IDTDescriptor {
        let mut type_attr = 0xe; // 32-bit interrupt
        // Currently const fn in Rust don't support branches or loops
        // Therefore, set the Present bit with bit ops
        type_attr |= ((offset != 0) as u8) << 7;
        IDTDescriptor {
            offset0: offset as u16,
            selector: 0x01, // kernel code selector, see gdt.rs
            zero: 0,
            type_attr: type_attr,
            offset1: (offset >> 16) as u16,
        }
    }
}
